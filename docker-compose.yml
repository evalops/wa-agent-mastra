version: '3.8'

services:
  postgres:
    image: pgvector/pgvector:pg16
    container_name: wa-agent-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-waagent}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_DB: ${POSTGRES_DB:-wa_agent}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-waagent}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - wa-agent-network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: wa-agent-app
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgres://${POSTGRES_USER:-waagent}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-wa_agent}
      SQLITE_DB_PATH: /app/data/sessions.db
      # Copy all env vars from .env
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_WHATSAPP_FROM: ${TWILIO_WHATSAPP_FROM}
      MODEL_PROVIDER: ${MODEL_PROVIDER}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      OPENAI_MODEL_ID: ${OPENAI_MODEL_ID}
      ANTHROPIC_MODEL_ID: ${ANTHROPIC_MODEL_ID}
      WORKING_MEMORY_SCOPE: ${WORKING_MEMORY_SCOPE}
      LAST_MESSAGES: ${LAST_MESSAGES}
      SEMANTIC_RECALL_TOPK: ${SEMANTIC_RECALL_TOPK}
      SEMANTIC_RECALL_RANGE: ${SEMANTIC_RECALL_RANGE}
      # MCP servers (optional)
      MCP_SENTRY_URL: ${MCP_SENTRY_URL}
      MCP_SENTRY_BEARER: ${MCP_SENTRY_BEARER}
    volumes:
      - app_data:/app/data
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - wa-agent-network

  # Optional: Nginx reverse proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: wa-agent-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - app
    networks:
      - wa-agent-network
    profiles:
      - production

  # Optional: Redis for caching (future enhancement)
  redis:
    image: redis:7-alpine
    container_name: wa-agent-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - wa-agent-network
    profiles:
      - with-redis

  # Optional: Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: wa-agent-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - wa-agent-network
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: wa-agent-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - wa-agent-network
    profiles:
      - monitoring

volumes:
  postgres_data:
  app_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  wa-agent-network:
    driver: bridge